/**
 * @file MR401.hpp
 * @author Michael Leopoldseder
 * @brief Header file describing the device for MagentaTV Media Receiver MR401
 * @version 0.1
 * @date 2024-01-14
 *
 * @copyright Copyright (c) 2024
 *
 */

#pragma once
#include "HardwareAbstract.hpp"
#include <DeviceInterface.hpp>
#include <string>

class MR401 : public DeviceInterface
{
public:
    MR401(std::shared_ptr<DisplayAbstract> display);
    static std::shared_ptr<MR401> getInstance() {return std::shared_ptr<MR401>(MR401::mInstance);}

    /* DeviceInterface */
    std::string getName() override { return "MR401"; };
    void displaySettings(lv_obj_t *menu, lv_obj_t *parent) override;
    void saveSettings() override{};
    void handleCustomKeypad(int keyCode, char keyChar) override;

private:
    static MR401 *mInstance;
    std::shared_ptr<DisplayAbstract> mDisplay;
    const uint16_t kFrequency = 38000; // in Hz. e.g. 38kHz.
    void dumpBuffer(uint16_t *buf, size_t size);

    static void virtualKeypad_event_cb(lv_event_t *e);

    static lv_obj_t *mControlPage;
    lv_obj_t *createControlPage(lv_obj_t *menu);
    lv_color_t mPrimaryColor;

#define MR401KEYS 16
std::string mRewind = std::string(LV_SYMBOL_LEFT) + std::string(LV_SYMBOL_LEFT);
std::string mForward = std::string(LV_SYMBOL_RIGHT) + std::string(LV_SYMBOL_RIGHT);
    struct keys
    {
        const std::string keySymbol;
        char key;
        int col;
        int colSpan;
        int row;
        int rowSpan;
    } keyInfo[MR401KEYS] = {
        {"Suche", 'S', 0, 1, 0, 1},
        {LV_SYMBOL_HOME, 'h', 1, 1, 0, 1},
        {"Musik", 'M', 2, 1, 0, 1},
        {"EPG", 'c', 0, 1, 1, 1},
        {"Opt", 'O', 2, 1, 1, 1},
        {"OK", 'k', 1, 1, 2, 1},
        {"Back", 'b', 0, 1, 3, 1},
        {"Exit", 'E', 2, 1, 3, 1},
        {"Info", 'i', 1, 1, 4, 1},
        {"Meine Aufnahmen", 'G', 0, 3, 5, 1},
        {std::string(LV_SYMBOL_LEFT) + std::string(LV_SYMBOL_LEFT), '<', 0, 1, 6, 1},
        {LV_SYMBOL_PLAY, 'p', 1, 1, 6, 1},
        {std::string(LV_SYMBOL_RIGHT) + std::string(LV_SYMBOL_RIGHT), '>', 2, 1, 6, 1},
        {LV_SYMBOL_PREV, 'R', 0, 1, 7, 1},
        {"Rec", 'r', 1, 1, 7, 1},
        {LV_SYMBOL_NEXT, 'F', 2, 1, 7, 1}
    };
#define LIRCENTRIES 34
    int getValues(char keyChar);
    struct LircKey
    {
        char key;
        uint16_t size;
        uint16_t buf[30];
    } lircKeys[LIRCENTRIES] =
        {
            {'0', 23, {262, 662, 291, 315, 581, 352, 253, 643, 296, 311, 579, 655, 580, 647, 292, 310, 268, 337, 580, 650, 582, 650, 582}},
            {'1', 27, {250, 661, 295, 313, 604, 351, 225, 649, 295, 311, 580, 654, 582, 647, 291, 310, 263, 337, 270, 360, 237, 338, 293, 313, 580, 626, 290}},
            {'2', 25, {288, 662, 289, 318, 581, 348, 252, 649, 293, 314, 581, 653, 582, 648, 269, 360, 236, 337, 291, 310, 268, 338, 584, 620, 608}},
            {'3', 27, {261, 662, 292, 289, 605, 348, 254, 646, 281, 327, 579, 653, 582, 646, 288, 313, 284, 317, 253, 349, 269, 336, 580, 348, 252, 645, 265}},
            {'4', 25, {288, 664, 291, 314, 581, 348, 251, 649, 270, 337, 583, 652, 580, 646, 269, 334, 283, 315, 277, 330, 580, 650, 266, 339, 579}},
            {'5', 25, {264, 663, 286, 321, 580, 353, 274, 621, 280, 327, 579, 658, 580, 643, 268, 334, 268, 334, 263, 341, 579, 651, 583, 649, 265}},
            {'6', 25, {257, 634, 306, 327, 581, 349, 249, 651, 293, 313, 580, 653, 581, 645, 281, 323, 278, 349, 260, 345, 558, 345, 250, 648, 581}},
            {'7', 27, {289, 663, 296, 311, 581, 348, 251, 648, 285, 348, 554, 658, 578, 646, 294, 334, 239, 335, 269, 336, 581, 349, 250, 344, 253, 647, 264}},
            {'8', 25, {263, 661, 286, 346, 554, 349, 252, 647, 297, 310, 580, 653, 582, 645, 276, 328, 265, 338, 581, 647, 285, 315, 252, 329, 607}},
            {'9', 25, {264, 662, 271, 336, 580, 350, 254, 645, 293, 314, 579, 628, 607, 646, 270, 334, 264, 339, 580, 647, 269, 337, 581, 649, 266}},
            {'k', 27, {257, 665, 270, 337, 578, 350, 250, 650, 265, 340, 579, 656, 578, 648, 270, 335, 257, 370, 553, 351, 248, 348, 250, 347, 250, 647, 264}},
            {'o', 25, {298, 620, 302, 310, 616, 312, 292, 612, 294, 312, 618, 618, 616, 612, 296, 302, 300, 312, 618, 614, 616, 310, 292, 612, 304}},
            {'u', 25, {264, 663, 294, 313, 579, 375, 226, 648, 296, 311, 579, 631, 605, 652, 265, 334, 264, 340, 580, 350, 250, 644, 269, 337, 580}},
            {'d', 25, {261, 664, 297, 311, 578, 350, 253, 648, 294, 288, 604, 656, 580, 648, 292, 311, 264, 340, 579, 350, 248, 624, 606, 652, 264}},
            {'l', 25, {262, 663, 295, 316, 576, 349, 261, 639, 269, 336, 580, 655, 580, 646, 270, 336, 260, 342, 580, 349, 249, 372, 228, 645, 581}},
            {'r', 25, {260, 663, 297, 311, 578, 350, 250, 649, 295, 312, 579, 629, 607, 654, 287, 313, 580, 648, 267, 335, 265, 335, 263, 369, 554}},
            {'c', 27, {261, 665, 295, 311, 578, 355, 245, 589, 357, 311, 579, 655, 579, 648, 268, 336, 579, 350, 251, 371, 227, 368, 227, 369, 227, 586, 323}},
            {'b', 25, {255, 663, 298, 310, 579, 350, 251, 650, 295, 311, 579, 656, 583, 643, 295, 312, 579, 350, 250, 348, 249, 649, 580, 652, 264}},
            {'e', 25, {284, 665, 296, 309, 579, 350, 249, 649, 294, 313, 580, 630, 606, 647, 295, 311, 583, 345, 250, 347, 252, 344, 251, 623, 604}},
            {'^', 23, {276, 640, 293, 313, 580, 349, 249, 650, 298, 309, 580, 654, 581, 646, 289, 319, 580, 652, 580, 647, 268, 338, 580}},
            {'v', 23, {260, 663, 297, 311, 579, 349, 252, 649, 296, 313, 577, 655, 580, 647, 267, 339, 579, 653, 584, 347, 249, 649, 579}},
            {'i', 25, {261, 663, 295, 311, 580, 355, 243, 650, 271, 336, 579, 654, 581, 648, 294, 312, 578, 653, 579, 352, 248, 348, 250, 646, 265}},
            {'<', 23, {256, 664, 297, 311, 579, 351, 248, 652, 295, 310, 579, 630, 605, 653, 578, 649, 296, 307, 294, 311, 578, 626, 606}},
            {'>', 25, {262, 668, 262, 340, 579, 350, 249, 652, 267, 336, 579, 654, 580, 653, 579, 647, 264, 337, 296, 311, 578, 350, 249, 623, 289}},
            {'p', 25, {262, 663, 293, 314, 580, 354, 246, 650, 294, 312, 580, 632, 603, 649, 271, 336, 578, 351, 249, 622, 606, 350, 249, 648, 264}},
            {'r', 25, {259, 663, 296, 311, 583, 345, 250, 649, 294, 313, 579, 657, 579, 648, 271, 335, 579, 350, 249, 349, 250, 643, 296, 312, 577}},
            {'E', 25, {284, 665, 296, 309, 579, 350, 249, 649, 294, 313, 580, 630, 606, 647, 295, 311, 583, 345, 250, 347, 252, 344, 251, 623, 604}},
            {'M', 23, {261, 664, 296, 311, 578, 351, 250, 649, 296, 311, 577, 659, 576, 651, 580, 622, 609, 351, 249, 644, 267, 339, 579}},
            {'S', 25, {258, 665, 293, 312, 579, 351, 249, 650, 271, 336, 579, 654, 580, 628, 608, 346, 249, 649, 580, 375, 225, 371, 227, 370, 225}},
            {'O', 23, {255, 666, 293, 311, 579, 350, 250, 655, 267, 336, 579, 657, 579, 652, 580, 652, 580, 653, 579, 350, 250, 647, 265}},
            {'R', 25, {260, 663, 296, 311, 578, 351, 250, 649, 297, 310, 577, 655, 579, 654, 579, 653, 289, 309, 262, 337, 294, 313, 579, 652, 263}},
            {'F', 23, {257, 664, 267, 340, 579, 349, 251, 654, 293, 310, 579, 628, 606, 626, 606, 648, 291, 314, 580, 647, 290, 316, 579}},
            {'G', 23, {255, 666, 294, 311, 578, 351, 249, 650, 272, 336, 578, 655, 580, 652, 580, 648, 296, 311, 579, 350, 252, 647, 580}},
            {'h', 23, {295, 659, 293, 314, 579, 350, 249, 649, 270, 337, 578, 629, 606, 652, 579, 652, 579, 350, 250, 649, 579, 655, 260}},
        };
};

