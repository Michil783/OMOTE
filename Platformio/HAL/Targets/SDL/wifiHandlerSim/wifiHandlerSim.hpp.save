#pragma once
#include "Notification.hpp"
#include "wifiHandlerInterface.h"
#include <atomic>
#include <memory>
#include <thread>

class wifiHandlerSim : public wifiHandlerInterface {
public:
  wifiHandlerSim();

  void begin() override;
  void scan() override;
  void connect(std::string ssid, std::string password) override;
  wifiStatus GetStatus() override { printf("wifiHandlerSim::GetStatus()\n"); return mCurrentStatus; };
  virtual void turnOff() override { printf("wifiHandlerSim::turnOff()\n"); };
  virtual std::string getFoundSSID(unsigned int index) override;
  virtual int getFoundRSSI(unsigned int index) override;

private:
  std::thread mFakeScanThread = std::thread([] {});
  std::thread mFakeStatusThread = std::thread([] {});
  
  wifiStatus mCurrentStatus = wifiStatus(false, "0.0.0.0", "not connected");
};